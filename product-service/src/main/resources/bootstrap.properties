spring.cloud.config.uri = http://localhost:8888

#below property will enable us to access the /actuator/refresh endpoint
management.endpoints.web.exposure.include = *

spring.cloud.config.profile = dev

#this will make sure to allocate available port dynamically on runtime if product-service has multiple running instances
server.port = 0

#this will register this service on eureka server with "product-service" as a name
spring.application.name = product-service

#this will generate random name for each instance of product-service and then register to discovery service
eureka.instance.instance-id = ${spring.application.name}:${random.uuid}

spring.cloud.vault.paths = secret/product-service

#hostname where vault is running in our case its running on localhost
spring.cloud.vault.host = localhost

#port where vault is running - default is 8200
spring.cloud.vault.port = 8200

spring.cloud.vault.scheme = http

#vault should only be accessed in authentication mode here the mode is TOKEN
spring.cloud.vault.authentication = TOKEN

#provide token that we used to start vault server
spring.cloud.vault.token = 00000000-0000-0000-0000-000000000000

#application name
spring.cloud.vault.application.name = product-service

#RabbitMQ config
spring.rabbitmq.host = localhost
spring.rabbitmq.port = 5672
spring.rabbitmq.username = guest
spring.rabbitmq.password = guest

#properties to connect to keycloak server
spring.security.oauth2.resourceserver.jwt.issuer-uri = http://localhost:8080/auth/realms/myapp-microservices-realm

